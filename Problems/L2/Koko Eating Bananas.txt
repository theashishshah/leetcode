title = Koko Eating Bananas


difficulty = Medium

desc -----
Koko loves to eat bananas. She has been tasked to eat the certain number of bananas spread over the n piles in
h hours.

Koko can decide her banana eating rate per hour 

k and each hour, she chooses some pile of bananas and eats 

k bananas from that pile.

If the pile has less than 

k bananas, she eats all of them instead and will not eat any more bananas during this hour. Koko has the flexibility to choose any pile of bananas during each hour.

Koko likes to eat slowly but still wants to finish eating all the bananas within 

h hours. As a good friend of Koko, you need to find the minimum integer 

k such that she can eat all the bananas within h hours.

Input
User Task:
Since this will be a functional problem, you don't have to take input. You just have to complete the function minEatingSpeed() that takes Integer array "piles" and integer "h" as parameters.

Custom Input
The first line will take two space-separated integers representing n and h.
The second line will take n space-separated integers representing elements of the array.

Constraints:
1 ≤ n ≤ 104
n ≤ h ≤ 109
1 ≤ piles[i] ≤ 109
Output
Return the minimum integer k such that she can eat all the bananas within h hours.






Example
Sample 1:
Input:
4 8
3 6 7 11
Output:
4

Sample 2:
Input:
5 5
30 11 23 4 20
Output:
30









test Cases -----




solution -----
def minEatingSpeed(piles, h):
    def sub(piles,k):
        hours = 0
        for i in piles:
            if i%k!=0:
                hours+=(i//k)+1
            else:
                hours+=(i//k)
        return hours

    l=1
    r = max(piles)
    ans=0
    while l<=r:
        mid = (l+r)//2
        if sub(piles,mid)<=h:
            ans=mid
            r = mid-1
        else:
            l = mid+1


    return ans