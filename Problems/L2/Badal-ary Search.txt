title = Badal-ary Search




difficulty = Hard

desc -----
Badal Sir received a sorted array of size 
N
N from one of his students. His task was straightforward: find out whether a given value 
X
X is present in the array or not.

But Badal Sir found this task far too boring and easy. So, to make things more challenging, he decided to apply some swap operations to the array himself. The rules for these operations were as follows:
 
1. He picked two distinct odd indices (1-based: 1, 3, 5, etc.) that hadn’t been used before and swapped the values at these indices.
2. He performed this operation as many times as he wanted, but he made sure that no index was swapped more than once.
Now, the array is modified and no longer fully sorted. After his modifications, Badal Sir is now curious again. Can you help him find out whether the value 
X
X is still present in the modified array, using a clever approach with a time complexity of O(log(n))?

NOTE: The values in the array are unique. 
Input
User Task
You don't need to read inputs or print anything. Complete the function badal_ary_Search() that takes an array of integers nums and an integer target as input parameters.

The first line of the input denotes the number of test cases 
T
T.
The first line of the test case is the size of the array as an integer 
N
N and the element 
X
X.
The second line of the test case consists of modified array elements, 
N
N space-separated integers.

Constraints
1 
≤
T
≤
≤T≤ 1000
1 
≤
N
≤
≤N≤ 106
1 
≤
A
[
i
]
≤
≤A[i]≤ 109

The sum of 
N
N over all test cases won't exceed 5 * 106
Output
Print "True" if the element 
X
X is found in the array, else print "False" without quotes.




Example
Sample Input
1
8 15
11 3 15 9 1 13 7 17

Sample Output
True


Explanation
For 1st Testcase,
• Array size (N): 8
• Value to find (X): 15
• Array: [11, 3, 15, 9, 1, 13, 7, 17]

1. Original Sorted Array: [1, 3, 7, 9, 11, 13, 15, 17]
2. Possible Swaps Applied:
• First Swap: Swapped odd indices 3 and 7 (1-based indexing; 0-based indices: 2 and 6).
• Array after this swap: [1, 3, 15, 9, 11, 13, 7, 17]
• Second Swap: Swapped odd indices 1 and 5 (1-based indexing; 0-based indices: 0 and 4).
• Array after this swap: [11, 3, 15, 9, 1, 13, 7, 17]
3. Final Modified Array: [11, 3, 15, 9, 1, 13, 7, 17]
4. Search: The value 15 is present in the modified array.





test Cases -----




solution -----
def badal_ary_Search(arr, n, x):
    start = 1
    end = n // 2

    while start <= end:
        mid = (start + end) // 2
        val = arr[(2 * mid) - 1]
        if val == x:
            return True
        elif val > x:
            end = mid - 1
        else:
            start = mid + 1

    idx = (2 * (end + 1)) - 2
    if idx < 0 or idx >= n:
        return False

    new_val = arr[idx]

    if new_val == x:
        return True

    start = 1
    end = n // 2

    while start <= end:
        mid = (start + end) >> 1
        val = arr[(2 * mid) - 1]
        if val >= new_val:
            end = mid - 1
        else:
            start = mid + 1

    idx = (2 * (end + 1)) - 2
    if idx < 0 or idx >= n:
        return False

    new_val = arr[idx]

    if new_val == x:
        return True

    return False